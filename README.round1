Introduction
============

Welcome to the “How to use Git” training.  This training will consist of some activities 
or exercises which you will do to demonstrate to yourself that you know the Basic and 
more Advanced commands used in git.  Since cPanel will include this feature in the 
product starting in Version 72, we want to have everyone in Support familiar with how to use it.  

Following the how to use git training there will be a “How to support Git” training.  This 
training will feature troubleshooting actions and also a list of “do not do” commands (much like 
the “no reboot” policy on a customers server that we have) which you will learn in this training.  
Since it is tempting to try out something that you should not do on a customers server, you 
should do these commands on your server so that you can see the effects of it, and how it 
could cause customers to lose data.  

Basic Git Commands
==================

You have just done the first Basic git command ( git clone ).  Here is the list of Basic
commands that we will be covering in this first module:

 =>  clone
 =>  checkout
 =>  add
 =>  commit
 =>  reset
   status
   init
   log
   diff
   fetch
   pull
   push
   remote
   branch
   merge


Struture of Git Repo
---------------------

Git is made up of 3 major areas:

 History
 Index
 Working Directory

History is the record of Commit’s that have been performed on this branch.  The current Commit that you are working 
on for this branch is called the HEAD.  It is where the next commit that you perform will end at.  The new commit will 
then be marked with the HEAD pointer.  

Index is the "staging" location for changes that have not been included in the commit History yet.  These changes are a 
part of the project on your local Repo.

Working Directory is the local Repo and will contain all the files under it whether they are in the Index and History or not. 


{special thanks to  http://marklodato.github.io/visual-git-guide/index-en.html}

                                 git commit -a
                    <-------------------------------------
  /---------------\ git commit /--------------\   git add    /------------------\
  |               | <------    |              |  <--------   |                   |
  |     History   |            |    Index     |              | Working Directory |
  |               | ------>    |              |  -------->   |                   |
  \---------------/ git reset   \-------------/ git checkout  \------------------/
                    ------------------------------------->
                              git checkout HEAD


Excercises to demonstrate a file being changed
----------------------------------------------

Let’s take a look at one file in this branch.  It is called the master branch and you should create a new file inside 
of the cloned repo and enter the version number into this file.  An example might be to create a file called myfile.  
Then add the change to the branch then commit the branch.  This branch includes 2 scripts which will help you to easily
identify which version a particular file is located.  The script show_status.sh with the argument of a small file will 
list which branch you are working in and what the contents of that file is.  The script initial_setup.sh with an argument 
of the file name will place the file into a state where that file is in 3 different states.   


The add and commit commands
===========================

Excercise 1   Create a small file and display which version of that file are in History, in Index, and in the Working Directory
-----------

echo 'version 1' > myfile
git add myfile
git commit -m “version 1”

Now you have one file with content of "version 1" and it is in all three parts of your master branch, History, 
Index, and Working Diretory:

run the command with the name of your file as an argument:  

./show_status.sh myfile

So we see that the change is in all three parts of the git repository master branch.  There is only one file, which is in 
your Working Directory.  However, the changes to that file are found in Index and History.  The commit that you did is 
a snapshot of what the file looked like when the commit was done.  You can describe the actions that you took in the 
message for that commit.

===================


Excercise 2   Change the file version in your Working Directory only, display the status of the file
-----------

Change the Working Directory file to a new version with this command:

echo 'version 2' > myfile
./show_status.sh myfile

The History and the Index have not changed, only the Working Directory file has changed.  

===================


Excercise 3   Add your file to the Index and display the status of the file
-----------

Next add the file to your Index with this command:

git add myfile
./show_status.sh myfile

Now you have added the changes on your file to the Index, notice now that the History has not changed.

==================


Excercise 4   Add your file to the History and display the status of the file. 
-----------

Next we want to commit the change of this file to History, run the following command:

git commit -m “Committed the Version 2 changes of this file”    <=====  You can put whatever message you want to the commit
./show_status.sh myfile

By doing this commit, you have added the changes that were "staged" in the Index to the commit snapshot.  Only the changes were added.  

Now we want to place the file into different versions of each part of git by running this command:

./initial_setup.sh  myfile

All three parts have the file changes  but with different versions.  We will cover two other commands which will recover changes.


The reset command
================

Excercise 5   Reset the file state so that there are different versions in History, in Index, and in the Working Directory.
-----------

./initial_setup.sh  myfile  #  reset back to the initial starting point
git reset -- myfile         #  Using the "dash dash" seperates options from parameters (the file name in this case)

This will copy the commit under HEAD to the Index.

./show_status.sh myfile

Notice that we have taken the changes that were in the commit History and put them into the Index

================


The checkout command
====================


Excercise 6   This will copy the changes from the Index to the Working Directory
-----------

./initial_setup.sh  myfile  #  reset back to the initial starting point
git checkout -- myfile
./show_status.sh myfile


===============

Excercise 7    Copy the changes from History (the pointer HEAD) to both the Index and the Working Directory
-----------

./initial_setup.sh  myfile  #  reset back to the initial starting point
git checkout HEAD -- myfile
./show_status.sh  myfile


=================

Excercise 8    
-----------

./initial_setup.sh  myfile  #  reset back to the initial starting point
git commit myfile -m "version 4"
./show_status.sh myfile
